"""Create initial database

Revision ID: 20211211_001700_initial_database
Revises:
Create Date:

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "20211211_001700_initial_database"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "project",
        sa.Column("id", postgresql.UUID(as_uuid=True), server_default=sa.text("gen_random_uuid()"), nullable=False),
        sa.Column("date_created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("project_name", sa.Text(), nullable=False),
        sa.Column("project_type", sa.Enum("SIMPLE", "VERSIONED", name="projecttype"), nullable=False),
        sa.Column("minidump_api_key", sa.String(length=32), nullable=False),
        sa.Column("symbol_api_key", sa.String(length=32), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "symcache",
        sa.Column("id", postgresql.UUID(as_uuid=True), server_default=sa.text("gen_random_uuid()"), nullable=False),
        sa.Column("date_created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("module_id", sa.Text(), nullable=False),
        sa.Column("build_id", sa.Text(), nullable=False),
        sa.Column("os", sa.Text(), nullable=True),
        sa.Column("arch", sa.Text(), nullable=True),
        sa.Column("file_location", sa.Text(), nullable=True),
        sa.Column("file_size_bytes", sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "users",
        sa.Column("id", postgresql.UUID(as_uuid=True), server_default=sa.text("gen_random_uuid()"), nullable=False),
        sa.Column("date_created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("email", sa.String(length=254), nullable=False),
        sa.Column("password", sa.String(length=200), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "build_metadata",
        sa.Column("id", postgresql.UUID(as_uuid=True), server_default=sa.text("gen_random_uuid()"), nullable=False),
        sa.Column("project_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("module_id", sa.Text(), nullable=False),
        sa.Column("build_id", sa.Text(), nullable=False),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["project.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "sym_upload_tracker",
        sa.Column("id", postgresql.UUID(as_uuid=True), server_default=sa.text("gen_random_uuid()"), nullable=False),
        sa.Column("project_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("date_created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("module_id", sa.Text(), nullable=True),
        sa.Column("build_id", sa.Text(), nullable=True),
        sa.Column("arch", sa.Text(), nullable=True),
        sa.Column("os", sa.Text(), nullable=True),
        sa.Column("file_hash", sa.String(length=64), nullable=True),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["project.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "minidump",
        sa.Column("id", postgresql.UUID(as_uuid=True), server_default=sa.text("gen_random_uuid()"), nullable=False),
        sa.Column("project_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("build_metadata_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("date_created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("symbolicated", sa.Boolean(), nullable=True),
        sa.Column("client_guid", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("filename", sa.Text(), nullable=False),
        sa.Column("stacktrace", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("decode_task_id", sa.String(length=36), nullable=True),
        sa.Column("decode_task_complete", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["build_metadata_id"],
            ["build_metadata.id"],
        ),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["project.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "symbol",
        sa.Column("id", postgresql.UUID(as_uuid=True), server_default=sa.text("gen_random_uuid()"), nullable=False),
        sa.Column("project_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("build_metadata_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("date_created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("app_version", sa.Text(), nullable=True),
        sa.Column("os", sa.Text(), nullable=False),
        sa.Column("arch", sa.Text(), nullable=False),
        sa.Column("file_location", sa.Text(), nullable=False),
        sa.Column("file_size_bytes", sa.Integer(), nullable=False),
        sa.Column("file_hash", sa.String(length=64), nullable=False),
        sa.ForeignKeyConstraint(
            ["build_metadata_id"],
            ["build_metadata.id"],
        ),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["project.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "annotation",
        sa.Column("id", postgresql.UUID(as_uuid=True), server_default=sa.text("gen_random_uuid()"), nullable=False),
        sa.Column("minidump_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("key", sa.Text(), nullable=False),
        sa.Column("value", sa.Text(), nullable=False),
        sa.ForeignKeyConstraint(
            ["minidump_id"],
            ["minidump.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "attachments",
        sa.Column("id", postgresql.UUID(as_uuid=True), server_default=sa.text("gen_random_uuid()"), nullable=False),
        sa.Column("project_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("minidump_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("date_created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("mime_type", sa.Text(), nullable=False),
        sa.Column("file_size_bytes", sa.Integer(), nullable=False),
        sa.Column("filename", sa.Text(), nullable=False),
        sa.Column("original_filename", sa.Text(), nullable=False),
        sa.ForeignKeyConstraint(
            ["minidump_id"],
            ["minidump.id"],
        ),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["project.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("attachments")
    op.drop_table("annotation")
    op.drop_table("symbol")
    op.drop_table("minidump")
    op.drop_table("sym_upload_tracker")
    op.drop_table("build_metadata")
    op.drop_table("users")
    op.drop_table("symcache")
    op.drop_table("project")
    op.execute("DROP TYPE projecttype")
    # ### end Alembic commands ###
