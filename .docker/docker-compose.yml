# Development docker-compose.yml
# Run `docker-compose up -d` in the directory, and the following things will happen
# 1. A postgres and redis container will be created. These are required backend services.
# 2. Two containers will be created based on the `Dockerfile.dev` in the root of the project.
#    This dockerfile allow the source code in the root of the project to be used with the rest
#    of the docker environment. You can modify the source, and since the flask development
#    server is used, the changes will be updated immediately.
# 3. A folder called `data` will be created in this directory. All appdata and log output
#    will be stored within this directory

version: "3.0"

networks:
    crashnet:
        driver: bridge

services:
    redis:
        image: bitnami/redis:7.0
        restart: always
        networks: [crashnet]
        ports: ["6379:6379"]
        environment:
            REDIS_PASSWORD: ${REDIS_PASSWORD:-password}

    postgres:
        image: postgres
        restart: always
        networks: [crashnet]
        volumes: [db_data:/var/lib/postgresql/data]
        ports: ["5432:5432"]
        environment:
            POSTGRES_DB: ${POSTGRES_DB:-crashserver}
            POSTGRES_USER: ${POSTGRES_USER:-postgres}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}

    minio:
        image: minio/minio
        networks: [crashnet]
        restart: always
        command: ["server", "/data", "--console-address", ":9001"]
        environment:
            MINIO_ACCESS_KEY: cs-access-key
            MINIO_SECRET_KEY: cs-secret-key
        ports: ["9000:9000", "9001:9001"]
        volumes: [minio_data:/data]

    crashserver-app:
        build:
            context: ..
            dockerfile: Dockerfile.dev
        restart: always
        networks: [crashnet]
        depends_on: [postgres, crashserver-worker, redis]
        ports: ["8888:8888"]
        volumes:
            - ../:/app/

            # App Data
            - ./logs:/logs
            - ./storage:/storage
        environment:
            FLASK_APP: crashserver/server:create_app
            FLASK_RUN_HOST: 0.0.0.0
            FLASK_RUN_PORT: 8888
            FLASK_DEBUG: 1
            CRASH_DB__db: ${POSTGRES_DB:-crashserver}
            CRASH_DB__user: ${POSTGRES_USER:-postgres}
            CRASH_DB__passwd: ${POSTGRES_PASSWORD:-password}
            CRASH_DB__host: ${CRASH_DB__HOST:-postgres}
            CRASH_REDIS__passwd: ${REDIS_PASSWORD:-password}
            TZ: ${TZ:-UTC}

    crashserver-worker:
        build:
            context: ..
            dockerfile: Dockerfile.dev
        command: python3 /app/main-rq.py
        restart: always
        depends_on: [postgres, redis]
        networks: [crashnet]
        volumes: ["./storage:/storage", "../:/app/"]
        environment:
            CRASH_DB__db: ${POSTGRES_DB:-crashserver}
            CRASH_DB__user: ${POSTGRES_USER:-postgres}
            CRASH_DB__passwd: ${POSTGRES_PASSWORD:-password}
            CRASH_DB__host: ${CRASH_DB__HOST:-postgres}
            CRASH_REDIS__passwd: ${REDIS_PASSWORD:-password}
            LOGURU_LEVEL: INFO


volumes:
    db_data:
    minio_data: